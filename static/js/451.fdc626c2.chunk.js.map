{"version":3,"file":"static/js/451.fdc626c2.chunk.js","mappings":"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","sources":["features/osd-overlay/video-worker/shared.ts","features/osd-overlay/video-worker/mp4/io/reader.ts","features/osd-overlay/video-worker/mp4/io/writer.ts","features/osd-overlay/video-worker/mp4/parsers.ts","features/osd-overlay/video-worker/mp4/writers.ts","features/osd-overlay/video-worker/mp4/index.ts","features/osd-overlay/video-worker/processor.ts","features/osd-overlay/video-worker/fonts.ts","features/osd-overlay/video-worker/osd.ts","features/osd-overlay/video-worker/worker.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["namespace VideoWorkerShared {\n  export const enum MessageType {\n    FILE_IN,\n    FILE_OUT,\n    PROGRESS_INIT,\n    PROGRESS_UPDATE,\n  }\n\n  export interface FileInMessage {\n    type: MessageType.FILE_IN;\n    fontFiles: File[];\n    osdFile: File;\n    videoFile: File;\n    outHandle: FileSystemFileHandle;\n  }\n\n  export interface FileOutMessage {\n    type: MessageType.FILE_OUT;\n  }\n\n  export interface ProgressInitMessage {\n    type: MessageType.PROGRESS_INIT;\n    expectedFrames: number;\n  }\n\n  export interface ProgressUpdateMessage {\n    type: MessageType.PROGRESS_UPDATE;\n    currentFrame?: number;\n    preview?: ImageBitmap;\n  }\n\n  export type Message =\n    | FileInMessage\n    | FileOutMessage\n    | ProgressInitMessage\n    | ProgressUpdateMessage;\n}\n\nexport default VideoWorkerShared;\n","export class FileStreamReader {\n  private static readonly BUFFER_SIZE = 1024 * 1024 * 8; // 8MB\n\n  private file: File;\n\n  private buffer = new ArrayBuffer(0);\n  private bufferOffset = 0;\n  private _offset = 0;\n\n  constructor(file: File) {\n    this.file = file;\n  }\n\n  async getNextString(length?: number): Promise<string> {\n    let bytes: Uint8Array;\n\n    if (length) {\n      bytes = await this.getNextBytes(length);\n    } else {\n      const byteBuffer = [];\n      let byte: number;\n      while ((byte = await this.getNextUint8()) !== 0) {\n        byteBuffer.push(byte);\n      }\n\n      bytes = new Uint8Array(byteBuffer);\n    }\n\n    const decoder = new TextDecoder();\n    const string = decoder.decode(bytes);\n    return string;\n  }\n\n  async getNextUint8(): Promise<number> {\n    const view = await this.getDataView(1);\n    return view.getUint8(0);\n  }\n\n  async getNextUint16(): Promise<number> {\n    const view = await this.getDataView(2);\n    return view.getUint16(0);\n  }\n\n  async getNextUint32(): Promise<number> {\n    const view = await this.getDataView(4);\n    return view.getUint32(0);\n  }\n\n  async getNextUint64(): Promise<bigint> {\n    const view = await this.getDataView(8);\n    return view.getBigUint64(0);\n  }\n\n  async getNextBytes(length: number): Promise<Uint8Array> {\n    const view = await this.getDataView(length);\n    const result = new Uint8Array(length);\n    for (let i = 0; i < length; i++) {\n      result[i] = view.getUint8(i);\n    }\n\n    return result;\n  }\n\n  seek(offset: number) {\n    this._offset = offset;\n    if (\n      this._offset < this.bufferOffset ||\n      this._offset > this.bufferEndOffset\n    ) {\n      this.buffer = new ArrayBuffer(0);\n      this.bufferOffset = this._offset;\n    }\n  }\n\n  skip(length: number) {\n    this._offset += length;\n  }\n\n  get offset() {\n    return this._offset;\n  }\n\n  get eof() {\n    return this.offset >= this.file.size;\n  }\n\n  private async fillBuffer(length: number) {\n    const fillEndOffset = this.offset + length;\n\n    if (fillEndOffset > this.bufferEndOffset) {\n      const newBufferOffset =\n        Math.floor(this.offset / FileStreamReader.BUFFER_SIZE) *\n        FileStreamReader.BUFFER_SIZE;\n      const newBufferEndOffset =\n        Math.ceil(fillEndOffset / FileStreamReader.BUFFER_SIZE) *\n        FileStreamReader.BUFFER_SIZE;\n\n      this.buffer = await this.file\n        .slice(newBufferOffset, newBufferEndOffset)\n        .arrayBuffer();\n      this.bufferOffset = newBufferOffset;\n    }\n  }\n\n  private async getDataView(length: number): Promise<DataView> {\n    await this.fillBuffer(length);\n\n    const result = new DataView(\n      this.buffer,\n      this.offset - this.bufferOffset,\n      length\n    );\n    this._offset += length;\n    return result;\n  }\n\n  private get bufferEndOffset() {\n    return this.bufferOffset + this.buffer.byteLength;\n  }\n}\n","/*\n  TODO:\n  - Keep a consistent buffer going instead of creating a new one every time.\n*/\n\nexport class FileStreamWriter {\n  private readonly file: FileSystemFileHandle;\n  private stream?: FileSystemWritableFileStream;\n\n  private _offset = 0;\n  private _size = 0;\n\n  constructor(file: FileSystemFileHandle) {\n    this.file = file;\n  }\n\n  async writeNextUint8(value: number): Promise<void> {\n    const array = new Uint8Array(1);\n    array[0] = value;\n\n    await this.writeNextBytes(array);\n  }\n\n  async writeNextUint16(value: number): Promise<void> {\n    const buffer = new ArrayBuffer(2);\n    const view = new DataView(buffer);\n    view.setUint16(0, value, false);\n\n    await this.writeNextBytes(buffer);\n  }\n\n  async writeNextUint32(value: number): Promise<void> {\n    const buffer = new ArrayBuffer(4);\n    const view = new DataView(buffer);\n    view.setUint32(0, value, false);\n\n    await this.writeNextBytes(buffer);\n  }\n\n  async writeNextString(value: string, length?: number): Promise<void> {\n    const buffer = new Uint8Array(\n      length !== undefined ? length : value.length + 1\n    );\n\n    const encoder = new TextEncoder();\n    encoder.encodeInto(value, buffer);\n\n    await this.writeNextBytes(buffer);\n  }\n\n  async writeNextBytes(bytes: BufferSource | Blob): Promise<void> {\n    const stream = await this.getStream();\n    await stream.write(bytes);\n\n    const byteLength = bytes instanceof Blob ? bytes.size : bytes.byteLength;\n    this._offset += byteLength;\n    this._size += byteLength;\n  }\n\n  async skip(length: number) {\n    await this.seek(this.offset + length);\n  }\n\n  async seek(offset: number) {\n    const stream = await this.getStream();\n    await stream.seek(offset);\n    this._offset = offset;\n  }\n\n  async close() {\n    const stream = await this.getStream();\n    await stream.close();\n    this.stream = undefined;\n  }\n\n  private async getStream(): Promise<FileSystemWritableFileStream> {\n    if (!this.stream) {\n      this.stream = await this.file.createWritable();\n      await this.stream.truncate(0);\n\n      this._size = 0;\n      this._offset = 0;\n    }\n\n    return this.stream;\n  }\n\n  get offset(): number {\n    return this._offset;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n}\n","import { FileStreamReader } from \"./io/reader\";\nimport {\n  Avc1Box,\n  AvcCBox,\n  BaseBox,\n  BaseFullBox,\n  Box,\n  BoxHeader,\n  BoxType,\n  DinfBox,\n  DrefBox,\n  FtypBox,\n  FullBoxHeader,\n  HdlrBox,\n  MdatBox,\n  MdhdBox,\n  MdiaBox,\n  MinfBox,\n  MoovBox,\n  MvhdBox,\n  SampleEntryBox,\n  StblBox,\n  StcoBox,\n  StscBox,\n  StsdBox,\n  StssBox,\n  StszBox,\n  SttsBox,\n  TkhdBox,\n  TrakBox,\n  UdtaBox,\n  UnknownBox,\n  UrlBox,\n  UrnBox,\n  VmhdBox,\n} from \"./types\";\n\nexport async function parseBox(stream: FileStreamReader): Promise<Box> {\n  const size = await stream.getNextUint32();\n  const type = await stream.getNextString(4);\n\n  const boxParsers: Record<\n    string,\n    new (stream: FileStreamReader, size: number, type: string) => BoxParser<Box>\n  > = {\n    \"url \": UrlBoxParser,\n    \"urn \": UrnBoxParser,\n    avc1: Avc1BoxParser,\n    avcC: AvcCBoxParser,\n    dinf: DinfBoxParser,\n    dref: DrefBoxParser,\n    ftyp: FtypBoxParser,\n    hdlr: HdrlBoxParser,\n    mdat: MdatBoxParser,\n    mdhd: MdhdBoxParser,\n    mdia: MdiaBoxParser,\n    minf: MinfBoxParser,\n    moov: MoovBoxParser,\n    mvhd: MvhdBoxParser,\n    stbl: StblBoxParser,\n    stco: StcoBoxParser,\n    stsc: StscBoxParser,\n    stsd: StsdBoxParser,\n    stss: StssBoxParser,\n    stsz: StszBoxParser,\n    stts: SttsBoxParser,\n    tkhd: TkhdBoxParser,\n    trak: TrakBoxParser,\n    udta: UdtaBoxParser,\n    vmhd: VmhdBoxParser,\n  };\n\n  let parser: BoxParser<Box>;\n  if (boxParsers[type]) {\n    parser = new boxParsers[type](stream, size, type);\n  } else {\n    console.warn(\n      `No parser available for %c${type}`,\n      \"text-decoration: underline\"\n    );\n    parser = new UnknownBoxParser(stream, size, type);\n  }\n\n  return await parser.parse();\n}\n\nabstract class BoxParser<T extends BaseBox> {\n  protected readonly stream: FileStreamReader;\n  protected readonly size: number;\n  protected readonly type: string;\n\n  protected readonly header: BoxHeader;\n\n  constructor(stream: FileStreamReader, size: number, type: string) {\n    this.stream = stream;\n    this.size = size;\n    this.type = type;\n\n    this.header = this.getHeader();\n  }\n\n  private getHeader(): BoxHeader {\n    const startOffset = this.stream.offset - 8;\n    const endOffset = startOffset + this.size;\n\n    return {\n      size: this.size,\n      type: this.type,\n\n      startOffset,\n      endOffset,\n    };\n  }\n\n  protected async getChildBoxes(): Promise<Partial<Record<BoxType, Box[]>>> {\n    const boxes: Partial<Record<BoxType, Box[]>> = {};\n\n    while (this.stream.offset < this.header.endOffset) {\n      const box = await this.getNextChildBox();\n\n      if (box.type === \"unknown\") {\n        console.warn(\n          `Child box %c${box.header!.type}%c in %c${\n            this.type\n          }%c is unknown, ignoring.`,\n          \"text-decoration: underline\",\n          \"text-decoration: none\",\n          \"text-decoration: underline\",\n          \"text-decoration: none\"\n        );\n      }\n\n      if (!(box.type in boxes)) {\n        boxes[box.type] = [];\n      }\n\n      boxes[box.type]!.push(box);\n    }\n\n    return boxes;\n  }\n\n  protected async getNextChildBox(): Promise<Box> {\n    return await parseBox(this.stream);\n  }\n\n  protected seekToEnd(): void {\n    if (this.stream.offset !== this.header.endOffset) {\n      const diff = this.header.endOffset - this.stream.offset;\n      console.warn(\n        `Box %c${this.header.type}%c was not fully parsed! Stopped ${diff}B early.`,\n        \"text-decoration: underline\",\n        \"text-decoration: none\",\n        this.header\n      );\n    }\n\n    this.stream.seek(this.header.endOffset);\n  }\n\n  abstract parse(): Promise<T>;\n}\n\nabstract class SimpleBoxParser<T extends BaseBox> extends BoxParser<T> {\n  async parse(): Promise<T> {\n    const box = await this.parseBox(this.header);\n    this.seekToEnd();\n    return box;\n  }\n\n  protected abstract parseBox(header: BoxHeader): Promise<T>;\n}\n\nabstract class FullBoxParser<T extends BaseFullBox> extends BoxParser<T> {\n  protected async getFullBoxHeader() {\n    const version = await this.stream.getNextUint8();\n    const flags =\n      ((await this.stream.getNextUint8()) << 16) |\n      ((await this.stream.getNextUint8()) << 8) |\n      (await this.stream.getNextUint8());\n\n    return {\n      version,\n      flags,\n    };\n  }\n\n  async parse(): Promise<T> {\n    const fullBoxHeader = await this.getFullBoxHeader();\n    const box = await this.parseBox(this.header, fullBoxHeader);\n    this.seekToEnd();\n    return box;\n  }\n\n  protected abstract parseBox(\n    header: BoxHeader,\n    fullHeader: FullBoxHeader\n  ): Promise<T>;\n}\n\nclass FtypBoxParser extends SimpleBoxParser<FtypBox> {\n  async parseBox(header: BoxHeader): Promise<FtypBox> {\n    const majorBrand = await this.stream.getNextString(4);\n    const minorVersion = await this.stream.getNextUint32();\n    const compatibleBrands = [];\n\n    for (let i = 0; i < (this.size - 16) / 4; i++) {\n      compatibleBrands.push(await this.stream.getNextString(4));\n    }\n\n    return {\n      type: \"ftyp\",\n      header,\n      majorBrand,\n      minorVersion,\n      compatibleBrands,\n    };\n  }\n}\n\nclass MdatBoxParser extends SimpleBoxParser<MdatBox> {\n  async parseBox(header: BoxHeader): Promise<MdatBox> {\n    this.stream.seek(this.header.endOffset);\n\n    return {\n      type: \"mdat\",\n      header,\n    };\n  }\n}\n\nclass MoovBoxParser extends SimpleBoxParser<MoovBox> {\n  async parseBox(header: BoxHeader): Promise<MoovBox> {\n    const childBoxes = await this.getChildBoxes();\n\n    return {\n      type: \"moov\",\n      header,\n      mvhd: childBoxes.mvhd![0] as MvhdBox,\n      trak: childBoxes.trak as TrakBox[],\n    };\n  }\n}\n\nclass MvhdBoxParser extends FullBoxParser<MvhdBox> {\n  async parseBox(\n    header: BoxHeader,\n    fullBoxHeader: FullBoxHeader\n  ): Promise<MvhdBox> {\n    if (fullBoxHeader.version === 1) {\n      throw new Error(\"Version 1 not supported\");\n    }\n\n    const creationTime = await this.stream.getNextUint32();\n    const modificationTime = await this.stream.getNextUint32();\n    const timescale = await this.stream.getNextUint32();\n    const duration = await this.stream.getNextUint32();\n    const rate = await this.stream.getNextUint32();\n    const volume = await this.stream.getNextUint16();\n\n    // Reserved.\n    await this.stream.getNextUint16();\n    await this.stream.getNextUint32();\n    await this.stream.getNextUint32();\n\n    const matrix = [];\n    for (let i = 0; i < 9; i++) {\n      matrix.push(await this.stream.getNextUint32());\n    }\n\n    // Predefined.\n    for (let i = 0; i < 6; i++) {\n      await this.stream.getNextUint32();\n    }\n\n    const nextTrackId = await this.stream.getNextUint32();\n\n    return {\n      header,\n      type: \"mvhd\",\n      fullBoxHeader,\n      creationTime,\n      modificationTime,\n      timescale,\n      duration,\n      rate,\n      volume,\n      matrix,\n      nextTrackId,\n    };\n  }\n}\n\nclass TrakBoxParser extends SimpleBoxParser<TrakBox> {\n  async parseBox(header: BoxHeader): Promise<TrakBox> {\n    const childBoxes = await this.getChildBoxes();\n\n    return {\n      header,\n      type: \"trak\",\n      tkhd: childBoxes.tkhd![0] as TkhdBox,\n      mdia: childBoxes.mdia![0] as MdiaBox,\n    };\n  }\n}\n\nclass TkhdBoxParser extends FullBoxParser<TkhdBox> {\n  async parseBox(\n    header: BoxHeader,\n    fullBoxHeader: FullBoxHeader\n  ): Promise<TkhdBox> {\n    if (fullBoxHeader.version === 1) {\n      throw new Error(\"Version 1 not supported\");\n    }\n\n    const creationTime = await this.stream.getNextUint32();\n    const modificationTime = await this.stream.getNextUint32();\n    const trackId = await this.stream.getNextUint32();\n    await this.stream.getNextUint32(); // Reserved\n    const duration = await this.stream.getNextUint32();\n\n    await this.stream.getNextUint32(); // Reserved\n    await this.stream.getNextUint32(); // Reserved\n\n    const layer = await this.stream.getNextUint16();\n    const alternateGroup = await this.stream.getNextUint16();\n    const volume = await this.stream.getNextUint16();\n\n    await this.stream.getNextUint16(); // Reserved.\n\n    const matrix = [];\n    for (let i = 0; i < 9; i++) {\n      matrix.push(await this.stream.getNextUint32());\n    }\n\n    let width = (await this.stream.getNextUint32()) >> 16;\n    let height = (await this.stream.getNextUint32()) >> 16;\n\n    return {\n      header,\n      type: \"tkhd\",\n      fullBoxHeader,\n      creationTime,\n      modificationTime,\n      trackId,\n      duration,\n      layer,\n      alternateGroup,\n      volume,\n      matrix,\n      width,\n      height,\n    };\n  }\n}\n\nclass MdiaBoxParser extends SimpleBoxParser<MdiaBox> {\n  async parseBox(header: BoxHeader): Promise<MdiaBox> {\n    const childBoxes = await this.getChildBoxes();\n\n    return {\n      header,\n      type: \"mdia\",\n      mdhd: childBoxes.mdhd![0] as MdhdBox,\n      minf: childBoxes.minf![0] as MinfBox,\n      hdlr: childBoxes.hdlr![0] as HdlrBox,\n    };\n  }\n}\n\nclass MdhdBoxParser extends FullBoxParser<MdhdBox> {\n  async parseBox(\n    header: BoxHeader,\n    fullBoxHeader: FullBoxHeader\n  ): Promise<MdhdBox> {\n    if (fullBoxHeader.version === 1) {\n      throw new Error(\"Version 1 not supported\");\n    }\n\n    let creationTime = await this.stream.getNextUint32();\n    let modificationTime = await this.stream.getNextUint32();\n    let timescale = await this.stream.getNextUint32();\n    let duration = await this.stream.getNextUint32();\n\n    // TODO: Parse this.\n    let language = \"\";\n    await this.stream.getNextUint16();\n\n    await this.stream.getNextUint16(); // Reserved.\n\n    return {\n      header,\n      type: \"mdhd\",\n      fullBoxHeader,\n      creationTime,\n      modificationTime,\n      timescale,\n      duration,\n      language,\n    };\n  }\n}\n\nclass MinfBoxParser extends SimpleBoxParser<MinfBox> {\n  async parseBox(header: BoxHeader): Promise<MinfBox> {\n    const childBoxes = await this.getChildBoxes();\n\n    return {\n      header,\n      type: \"minf\",\n      vmhd: \"vmhd\" in childBoxes ? (childBoxes.vmhd![0] as VmhdBox) : undefined,\n      stbl: childBoxes.stbl![0] as StblBox,\n      dinf: childBoxes.dinf![0] as DinfBox,\n    };\n  }\n}\n\nclass StblBoxParser extends SimpleBoxParser<StblBox> {\n  async parseBox(header: BoxHeader): Promise<StblBox> {\n    const childBoxes = await this.getChildBoxes();\n\n    return {\n      header,\n      type: \"stbl\",\n      stco: childBoxes.stco![0] as StcoBox,\n      stsc: childBoxes.stsc![0] as StscBox,\n      stsd: childBoxes.stsd![0] as StsdBox,\n      stss: childBoxes.stss![0] as StssBox,\n      stsz: childBoxes.stsz![0] as StszBox,\n      stts: childBoxes.stts![0] as SttsBox,\n    };\n  }\n}\n\nclass StsdBoxParser extends FullBoxParser<StsdBox> {\n  async parseBox(\n    header: BoxHeader,\n    fullBoxHeader: FullBoxHeader\n  ): Promise<StsdBox> {\n    const entryCount = await this.stream.getNextUint32();\n\n    const entries = [];\n    for (let i = 0; i < entryCount; i++) {\n      const nextChild = (await this.getNextChildBox()) as SampleEntryBox;\n      entries.push(nextChild);\n    }\n\n    return {\n      header,\n      type: \"stsd\",\n      fullBoxHeader,\n      entries,\n    };\n  }\n}\n\nclass Avc1BoxParser extends SimpleBoxParser<Avc1Box> {\n  async parseBox(header: BoxHeader): Promise<Avc1Box> {\n    // Reserved\n    for (let i = 0; i < 6; i++) {\n      await this.stream.getNextUint8();\n    }\n\n    const dataReferenceIndex = await this.stream.getNextUint16();\n\n    // Technically from VisualSampleEntry but...\n    for (let i = 0; i < 2; i++) {\n      await this.stream.getNextUint16(); // Reserved\n    }\n    for (let i = 0; i < 3; i++) {\n      await this.stream.getNextUint32(); // Reserved\n    }\n\n    const width = await this.stream.getNextUint16();\n    const height = await this.stream.getNextUint16();\n    const horizontalResolution = await this.stream.getNextUint32();\n    const verticalResolution = await this.stream.getNextUint32();\n\n    await this.stream.getNextUint32(); // Reserved\n\n    const frameCount = await this.stream.getNextUint16();\n    const compressorName = await this.stream.getNextString(32);\n    const depth = await this.stream.getNextUint16();\n\n    await this.stream.getNextUint16(); // Reserved\n\n    const avcC = (await this.getNextChildBox()) as AvcCBox;\n\n    return {\n      header,\n      type: \"avc1\",\n      avcC,\n      compressorName,\n      dataReferenceIndex,\n      depth,\n      frameCount,\n      height,\n      horizontalResolution,\n      verticalResolution,\n      width,\n    };\n  }\n}\n\nclass AvcCBoxParser extends SimpleBoxParser<AvcCBox> {\n  async parseBox(header: BoxHeader): Promise<AvcCBox> {\n    const configurationVersion = await this.stream.getNextUint8();\n    const profileIndication = await this.stream.getNextUint8();\n    const profileCompatibility = await this.stream.getNextUint8();\n    const levelIndication = await this.stream.getNextUint8();\n    const lengthSizeMinusOne = (await this.stream.getNextUint8()) & 0x3;\n\n    const spsCount = (await this.stream.getNextUint8()) & 0x1f;\n    const sps = [];\n    for (let i = 0; i < spsCount; i++) {\n      const spsLength = await this.stream.getNextUint16();\n      const spsData = await this.stream.getNextBytes(spsLength);\n      sps.push(spsData);\n    }\n\n    const ppsCount = await this.stream.getNextUint8();\n    const pps = [];\n    for (let i = 0; i < ppsCount; i++) {\n      const ppsLength = await this.stream.getNextUint16();\n      const ppsData = await this.stream.getNextBytes(ppsLength);\n      pps.push(ppsData);\n    }\n\n    return {\n      header,\n      type: \"avcC\",\n      configurationVersion,\n      profileIndication,\n      profileCompatibility,\n      levelIndication,\n      lengthSizeMinusOne,\n      sequenceParameterSets: sps,\n      pictureParameterSets: pps,\n    };\n  }\n}\n\nclass StssBoxParser extends FullBoxParser<StssBox> {\n  async parseBox(\n    header: BoxHeader,\n    fullBoxHeader: FullBoxHeader\n  ): Promise<StssBox> {\n    const entryCount = await this.stream.getNextUint32();\n    const sampleNumbers = [];\n    for (let i = 0; i < entryCount; i++) {\n      sampleNumbers.push(await this.stream.getNextUint32());\n    }\n\n    return {\n      header,\n      type: \"stss\",\n      fullBoxHeader,\n      sampleNumbers,\n    };\n  }\n}\n\nclass StcoBoxParser extends FullBoxParser<StcoBox> {\n  async parseBox(\n    header: BoxHeader,\n    fullBoxHeader: FullBoxHeader\n  ): Promise<StcoBox> {\n    const entryCount = await this.stream.getNextUint32();\n    const chunkOffsets = [];\n    for (let i = 0; i < entryCount; i++) {\n      chunkOffsets.push(await this.stream.getNextUint32());\n    }\n\n    return {\n      header,\n      type: \"stco\",\n      fullBoxHeader,\n      chunkOffsets,\n    };\n  }\n}\n\nclass StscBoxParser extends FullBoxParser<StscBox> {\n  async parseBox(\n    header: BoxHeader,\n    fullBoxHeader: FullBoxHeader\n  ): Promise<StscBox> {\n    const entryCount = await this.stream.getNextUint32();\n    const entries = [];\n    for (let i = 0; i < entryCount; i++) {\n      entries.push({\n        firstChunk: await this.stream.getNextUint32(),\n        samplesPerChunk: await this.stream.getNextUint32(),\n        sampleDescriptionIndex: await this.stream.getNextUint32(),\n      });\n    }\n\n    return {\n      header,\n      type: \"stsc\",\n      fullBoxHeader,\n      entries,\n    };\n  }\n}\n\nclass StszBoxParser extends FullBoxParser<StszBox> {\n  async parseBox(\n    header: BoxHeader,\n    fullBoxHeader: FullBoxHeader\n  ): Promise<StszBox> {\n    let sampleSizes = [await this.stream.getNextUint32()];\n    const sampleCount = await this.stream.getNextUint32();\n\n    // If sample size is 0, then we have a table of sample sizes, otherwise\n    // all samples are the same size.\n    if (sampleSizes[0] === 0) {\n      sampleSizes = [];\n      for (let i = 0; i < sampleCount; i++) {\n        sampleSizes.push(await this.stream.getNextUint32());\n      }\n    }\n\n    return {\n      header,\n      type: \"stsz\",\n      fullBoxHeader,\n      sampleSizes,\n      sampleCount,\n    };\n  }\n}\n\nclass SttsBoxParser extends FullBoxParser<SttsBox> {\n  async parseBox(\n    header: BoxHeader,\n    fullBoxHeader: FullBoxHeader\n  ): Promise<SttsBox> {\n    const entryCount = await this.stream.getNextUint32();\n    const entries = [];\n    for (let i = 0; i < entryCount; i++) {\n      entries.push({\n        sampleCount: await this.stream.getNextUint32(),\n        sampleDelta: await this.stream.getNextUint32(),\n      });\n    }\n\n    return {\n      header,\n      type: \"stts\",\n      fullBoxHeader,\n      entries,\n    };\n  }\n}\n\nclass UdtaBoxParser extends SimpleBoxParser<UdtaBox> {\n  async parseBox(header: BoxHeader): Promise<UdtaBox> {\n    // TODO: Not fully parsed.\n    await this.getChildBoxes();\n\n    return {\n      header,\n      type: \"udta\",\n    };\n  }\n}\n\nclass HdrlBoxParser extends FullBoxParser<HdlrBox> {\n  async parseBox(\n    header: BoxHeader,\n    fullBoxHeader: FullBoxHeader\n  ): Promise<HdlrBox> {\n    await this.stream.getNextUint32(); // Predefined\n\n    const handlerType = await this.stream.getNextString(4); // Handler type\n\n    for (let i = 0; i < 3; i++) {\n      await this.stream.getNextUint32(); // Reserved\n    }\n\n    const name = await this.stream.getNextString();\n\n    return {\n      header,\n      fullBoxHeader,\n      type: \"hdlr\",\n      handlerType,\n      name,\n    };\n  }\n}\n\nclass VmhdBoxParser extends FullBoxParser<VmhdBox> {\n  async parseBox(\n    header: BoxHeader,\n    fullBoxHeader: FullBoxHeader\n  ): Promise<VmhdBox> {\n    const graphicsMode = await this.stream.getNextUint16();\n    const opColor = [\n      await this.stream.getNextUint16(),\n      await this.stream.getNextUint16(),\n      await this.stream.getNextUint16(),\n    ];\n\n    return {\n      header,\n      fullBoxHeader,\n      type: \"vmhd\",\n      graphicsMode,\n      opColor,\n    };\n  }\n}\n\nclass DrefBoxParser extends FullBoxParser<DrefBox> {\n  async parseBox(\n    header: BoxHeader,\n    fullBoxHeader: FullBoxHeader\n  ): Promise<DrefBox> {\n    const entryCount = await this.stream.getNextUint32();\n    const entries = [];\n    for (let i = 0; i < entryCount; i++) {\n      entries.push((await this.getNextChildBox()) as UrlBox | UrnBox);\n    }\n\n    return {\n      header,\n      fullBoxHeader,\n      type: \"dref\",\n      entries,\n    };\n  }\n}\n\nclass DinfBoxParser extends SimpleBoxParser<DinfBox> {\n  async parseBox(header: BoxHeader): Promise<DinfBox> {\n    const childBoxes = await this.getChildBoxes();\n\n    return {\n      header,\n      type: \"dinf\",\n      dref: childBoxes.dref![0] as DrefBox,\n    };\n  }\n}\n\nclass UrnBoxParser extends FullBoxParser<UrnBox> {\n  async parseBox(\n    header: BoxHeader,\n    fullBoxHeader: FullBoxHeader\n  ): Promise<UrnBox> {\n    let name: string = \"\";\n    let location: string = \"\";\n    if (fullBoxHeader.flags !== 1) {\n      name = await this.stream.getNextString();\n      location = await this.stream.getNextString();\n    }\n\n    return {\n      header,\n      fullBoxHeader,\n      type: \"urn \",\n      name,\n      location,\n    };\n  }\n}\n\nclass UrlBoxParser extends FullBoxParser<UrlBox> {\n  async parseBox(\n    header: BoxHeader,\n    fullBoxHeader: FullBoxHeader\n  ): Promise<UrlBox> {\n    let location: string = \"\";\n    if (fullBoxHeader.flags !== 1) {\n      location = await this.stream.getNextString();\n    }\n\n    return {\n      header,\n      fullBoxHeader,\n      type: \"url \",\n      location,\n    };\n  }\n}\n\nclass UnknownBoxParser extends SimpleBoxParser<UnknownBox> {\n  async parseBox(header: BoxHeader): Promise<UnknownBox> {\n    this.stream.seek(this.header.endOffset);\n\n    return {\n      header,\n      type: \"unknown\",\n    };\n  }\n}\n","import { FileStreamWriter } from \"./io/writer\";\nimport {\n  Avc1Box,\n  AvcCBox,\n  BaseBox,\n  BaseFullBox,\n  Box,\n  DinfBox,\n  DrefBox,\n  FtypBox,\n  HdlrBox,\n  MdhdBox,\n  MdiaBox,\n  MinfBox,\n  MoovBox,\n  MvhdBox,\n  StblBox,\n  StcoBox,\n  StscBox,\n  StsdBox,\n  StssBox,\n  StszBox,\n  SttsBox,\n  TkhdBox,\n  TrakBox,\n  UrlBox,\n  UrnBox,\n  VmhdBox,\n} from \"./types\";\n\nexport async function writeBox(\n  stream: FileStreamWriter,\n  box: Box\n): Promise<void> {\n  const boxWriters: Record<\n    string,\n    new (writer: FileStreamWriter) => BoxWriter<Box>\n  > = {\n    \"url \": UrlBoxWriter,\n    \"urn \": UrnBoxWriter,\n    avc1: Avc1BoxWriter,\n    avcC: AvcCBoxWriter,\n    dinf: DinfBoxWriter,\n    dref: DrefBoxWriter,\n    ftyp: FtypBoxWriter,\n    hdlr: HdlrBoxWriter,\n    mdhd: MdhdBoxWriter,\n    mdia: MdiaBoxWriter,\n    minf: MinfBoxWriter,\n    moov: MoovBoxWriter,\n    mvhd: MvhdBoxWriter,\n    stbl: StblBoxWriter,\n    stco: StcoBoxWriter,\n    stsc: StscBoxWriter,\n    stsd: StsdBoxWriter,\n    stss: StssBoxWriter,\n    stsz: StszBoxWriter,\n    stts: SttsBoxWriter,\n    tkhd: TkhdBoxWriter,\n    trak: TrakBoxWriter,\n    vmhd: VmhdBoxWriter,\n  };\n\n  let writer = boxWriters[box.type];\n  if (!writer) {\n    console.warn(\n      `No writer available for %c${box.type}, not writing.`,\n      \"text-decoration: underline\"\n    );\n  }\n\n  await new writer(stream).write(box);\n}\n\nabstract class BoxWriter<T extends BaseBox> {\n  constructor(protected readonly stream: FileStreamWriter) {}\n\n  async write(box: T): Promise<void> {\n    const startOffset = this.stream.offset;\n\n    await this.stream.skip(4);\n    await this.stream.writeNextString(box.type, 4);\n    await this.writeContents(box);\n\n    const endOffset = this.stream.offset;\n    const size = endOffset - startOffset;\n    await this.stream.seek(startOffset);\n    await this.stream.writeNextUint32(size);\n\n    await this.stream.seek(endOffset);\n  }\n\n  abstract writeContents(box: T): Promise<void>;\n}\n\nabstract class FullBoxWriter<T extends BaseFullBox> extends BoxWriter<T> {\n  async writeContents(box: T): Promise<void> {\n    await this.stream.writeNextUint8(box.fullBoxHeader!.version);\n\n    await this.stream.writeNextUint8(box.fullBoxHeader!.flags >> 16);\n    await this.stream.writeNextUint8(box.fullBoxHeader!.flags >> 8);\n    await this.stream.writeNextUint8(box.fullBoxHeader!.flags);\n  }\n}\n\nexport class FtypBoxWriter extends BoxWriter<FtypBox> {\n  async writeContents(box: FtypBox): Promise<void> {\n    await this.stream.writeNextString(box.majorBrand, 4);\n    await this.stream.writeNextUint32(box.minorVersion);\n\n    for (const compatibleBrand of box.compatibleBrands) {\n      await this.stream.writeNextString(compatibleBrand, 4);\n    }\n  }\n}\n\nexport class AvcCBoxWriter extends BoxWriter<AvcCBox> {\n  async writeContents(box: AvcCBox): Promise<void> {\n    await this.stream.writeNextUint8(box.configurationVersion);\n\n    await this.stream.writeNextUint8(box.profileIndication);\n    await this.stream.writeNextUint8(box.profileCompatibility);\n    await this.stream.writeNextUint8(box.levelIndication);\n    await this.stream.writeNextUint8(box.lengthSizeMinusOne | 0xfc);\n\n    await this.stream.writeNextUint8(box.sequenceParameterSets.length | 0xe0);\n    for (const sequenceParameterSet of box.sequenceParameterSets) {\n      await this.stream.writeNextUint16(sequenceParameterSet.byteLength);\n      await this.stream.writeNextBytes(sequenceParameterSet);\n    }\n\n    await this.stream.writeNextUint8(box.pictureParameterSets.length);\n    for (const pictureParameterSets of box.pictureParameterSets) {\n      await this.stream.writeNextUint16(pictureParameterSets.byteLength);\n      await this.stream.writeNextBytes(pictureParameterSets);\n    }\n  }\n}\n\nexport class Avc1BoxWriter extends BoxWriter<Avc1Box> {\n  // TODO: Generalise as a SampleEntryBoxWriter\n\n  async writeContents(box: Avc1Box): Promise<void> {\n    // From SampleEntry\n    await this.stream.skip(6);\n    await this.stream.writeNextUint16(box.dataReferenceIndex);\n\n    // From VisualSampleEntry\n    await this.stream.skip(2 * 2 + 4 * 3);\n\n    await this.stream.writeNextUint16(box.width);\n    await this.stream.writeNextUint16(box.height);\n\n    await this.stream.writeNextUint32(box.horizontalResolution);\n    await this.stream.writeNextUint32(box.verticalResolution);\n\n    await this.stream.skip(4);\n\n    await this.stream.writeNextUint16(box.frameCount);\n    await this.stream.writeNextString(box.compressorName, 32);\n    await this.stream.writeNextUint16(box.depth);\n\n    await this.stream.writeNextUint16(0xffff);\n\n    // From AVCSampleEntry\n    await writeBox(this.stream, box.avcC);\n  }\n}\n\nexport class StsdBoxWriter extends FullBoxWriter<StsdBox> {\n  async writeContents(box: StsdBox): Promise<void> {\n    await super.writeContents(box);\n\n    await this.stream.writeNextUint32(box.entries.length);\n    for (const entry of box.entries) {\n      await writeBox(this.stream, entry);\n    }\n  }\n}\n\nexport class StblBoxWriter extends BoxWriter<StblBox> {\n  async writeContents(box: StblBox): Promise<void> {\n    await writeBox(this.stream, box.stco);\n    await writeBox(this.stream, box.stsc);\n    await writeBox(this.stream, box.stsd);\n    await writeBox(this.stream, box.stss);\n    await writeBox(this.stream, box.stsz);\n    await writeBox(this.stream, box.stts);\n  }\n}\n\nexport class UrlBoxWriter extends FullBoxWriter<UrlBox> {\n  async writeContents(box: UrlBox): Promise<void> {\n    await super.writeContents(box);\n\n    // if (box.fullBoxHeader!.flags !== 1) {\n    await this.stream.writeNextString(box.location);\n    // }\n  }\n}\n\nexport class UrnBoxWriter extends FullBoxWriter<UrnBox> {\n  async writeContents(box: UrnBox): Promise<void> {\n    await super.writeContents(box);\n\n    if (box.fullBoxHeader!.flags !== 1) {\n      await this.stream.writeNextString(box.name);\n      await this.stream.writeNextString(box.location);\n    }\n  }\n}\n\nexport class DinfBoxWriter extends BoxWriter<DinfBox> {\n  async writeContents(box: DinfBox): Promise<void> {\n    await writeBox(this.stream, box.dref);\n  }\n}\n\nexport class DrefBoxWriter extends FullBoxWriter<DrefBox> {\n  async writeContents(box: DrefBox): Promise<void> {\n    await super.writeContents(box);\n\n    await this.stream.writeNextUint32(box.entries.length);\n    for (const entry of box.entries) {\n      await writeBox(this.stream, entry);\n    }\n  }\n}\n\nexport class VmhdBoxWriter extends FullBoxWriter<VmhdBox> {\n  async writeContents(box: VmhdBox): Promise<void> {\n    await super.writeContents(box);\n\n    await this.stream.writeNextUint16(box.graphicsMode);\n    for (const color of box.opColor) {\n      await this.stream.writeNextUint16(color);\n    }\n  }\n}\n\nexport class HdlrBoxWriter extends FullBoxWriter<HdlrBox> {\n  async writeContents(box: HdlrBox): Promise<void> {\n    await super.writeContents(box);\n\n    await this.stream.skip(4);\n    await this.stream.writeNextString(box.handlerType, 4);\n    await this.stream.skip(4 * 3);\n    await this.stream.writeNextString(box.name);\n  }\n}\n\nexport class StcoBoxWriter extends FullBoxWriter<StcoBox> {\n  async writeContents(box: StcoBox): Promise<void> {\n    await super.writeContents(box);\n\n    await this.stream.writeNextUint32(box.chunkOffsets.length);\n    for (const chunkOffset of box.chunkOffsets) {\n      await this.stream.writeNextUint32(chunkOffset);\n    }\n  }\n}\n\nexport class StszBoxWriter extends FullBoxWriter<StszBox> {\n  async writeContents(box: StszBox): Promise<void> {\n    await super.writeContents(box);\n\n    await this.stream.writeNextUint32(\n      box.sampleSizes.length > 1 ? 0 : box.sampleSizes[0]\n    );\n    await this.stream.writeNextUint32(box.sampleCount);\n    for (const sampleSize of box.sampleSizes) {\n      await this.stream.writeNextUint32(sampleSize);\n    }\n  }\n}\n\nexport class StscBoxWriter extends FullBoxWriter<StscBox> {\n  async writeContents(box: StscBox): Promise<void> {\n    await super.writeContents(box);\n\n    await this.stream.writeNextUint32(box.entries.length);\n    for (const entry of box.entries) {\n      await this.stream.writeNextUint32(entry.firstChunk);\n      await this.stream.writeNextUint32(entry.samplesPerChunk);\n      await this.stream.writeNextUint32(entry.sampleDescriptionIndex);\n    }\n  }\n}\n\nexport class SttsBoxWriter extends FullBoxWriter<SttsBox> {\n  async writeContents(box: SttsBox): Promise<void> {\n    await super.writeContents(box);\n\n    await this.stream.writeNextUint32(box.entries.length);\n    for (const entry of box.entries) {\n      await this.stream.writeNextUint32(entry.sampleCount);\n      await this.stream.writeNextUint32(entry.sampleDelta);\n    }\n  }\n}\n\nexport class StssBoxWriter extends FullBoxWriter<StssBox> {\n  async writeContents(box: StssBox): Promise<void> {\n    await super.writeContents(box);\n\n    await this.stream.writeNextUint32(box.sampleNumbers.length);\n    for (const sampleNumber of box.sampleNumbers) {\n      await this.stream.writeNextUint32(sampleNumber);\n    }\n  }\n}\n\nexport class MdhdBoxWriter extends FullBoxWriter<MdhdBox> {\n  async writeContents(box: MdhdBox): Promise<void> {\n    await super.writeContents(box);\n\n    await this.stream.writeNextUint32(box.creationTime);\n    await this.stream.writeNextUint32(box.modificationTime);\n    await this.stream.writeNextUint32(box.timescale);\n    await this.stream.writeNextUint32(box.duration);\n\n    // TODO: language\n    await this.stream.skip(2);\n    await this.stream.skip(2);\n  }\n}\n\nexport class TkhdBoxWriter extends FullBoxWriter<TkhdBox> {\n  async writeContents(box: TkhdBox): Promise<void> {\n    await super.writeContents(box);\n\n    await this.stream.writeNextUint32(box.creationTime);\n    await this.stream.writeNextUint32(box.modificationTime);\n    await this.stream.writeNextUint32(box.trackId);\n\n    await this.stream.skip(4);\n\n    await this.stream.writeNextUint32(box.duration);\n\n    await this.stream.skip(4 * 2);\n\n    await this.stream.writeNextUint16(box.layer);\n    await this.stream.writeNextUint16(box.alternateGroup);\n    await this.stream.writeNextUint16(box.volume);\n\n    await this.stream.skip(2);\n\n    for (const matrix of box.matrix) {\n      await this.stream.writeNextUint32(matrix);\n    }\n\n    await this.stream.writeNextUint32(box.width);\n    await this.stream.writeNextUint32(box.height);\n  }\n}\n\nexport class MvhdBoxWriter extends FullBoxWriter<MvhdBox> {\n  async writeContents(box: MvhdBox): Promise<void> {\n    await super.writeContents(box);\n\n    await this.stream.writeNextUint32(box.creationTime);\n    await this.stream.writeNextUint32(box.modificationTime);\n    await this.stream.writeNextUint32(box.timescale);\n    await this.stream.writeNextUint32(box.duration);\n\n    await this.stream.writeNextUint32(box.rate);\n    await this.stream.writeNextUint16(box.volume);\n\n    await this.stream.skip(2 + 4 * 2);\n\n    for (const matrix of box.matrix) {\n      await this.stream.writeNextUint32(matrix);\n    }\n\n    await this.stream.skip(4 * 6);\n\n    await this.stream.writeNextUint32(box.nextTrackId);\n  }\n}\n\nexport class MinfBoxWriter extends BoxWriter<MinfBox> {\n  async writeContents(box: MinfBox): Promise<void> {\n    await writeBox(this.stream, box.vmhd!);\n    await writeBox(this.stream, box.dinf!);\n    await writeBox(this.stream, box.stbl!);\n  }\n}\n\nexport class MdiaBoxWriter extends BoxWriter<MdiaBox> {\n  async writeContents(box: MdiaBox): Promise<void> {\n    await writeBox(this.stream, box.mdhd!);\n    await writeBox(this.stream, box.hdlr!);\n    await writeBox(this.stream, box.minf!);\n  }\n}\n\nexport class TrakBoxWriter extends BoxWriter<TrakBox> {\n  async writeContents(box: TrakBox): Promise<void> {\n    await writeBox(this.stream, box.tkhd!);\n    await writeBox(this.stream, box.mdia!);\n  }\n}\n\nexport class MoovBoxWriter extends BoxWriter<MoovBox> {\n  async writeContents(box: MoovBox): Promise<void> {\n    await writeBox(this.stream, box.mvhd!);\n    for (const trak of box.trak) {\n      await writeBox(this.stream, trak);\n    }\n  }\n}\n\nexport class MdatBoxStreamWriter {\n  private startOffset: number = 0;\n\n  private opened = false;\n  private closed = false;\n\n  constructor(private readonly stream: FileStreamWriter) {}\n\n  async open() {\n    if (this.opened) {\n      throw new Error(\"already opened\");\n    } else if (this.closed) {\n      throw new Error(\"already closed\");\n    }\n\n    this.startOffset = this.stream.offset;\n\n    await this.stream.skip(4);\n    await this.stream.writeNextString(\"mdat\", 4);\n\n    this.opened = true;\n  }\n\n  async write(bytes: Blob | BufferSource): Promise<void> {\n    if (!this.opened) {\n      throw new Error(\"not opened\");\n    } else if (this.closed) {\n      throw new Error(\"already closed\");\n    }\n\n    await this.stream.writeNextBytes(bytes);\n  }\n\n  async close() {\n    if (!this.opened) {\n      throw new Error(\"not opened\");\n    } else if (this.closed) {\n      throw new Error(\"already closed\");\n    }\n\n    const endOffset = this.stream.offset;\n\n    await this.stream.seek(this.startOffset);\n    await this.stream.writeNextUint32(endOffset - this.startOffset);\n    await this.stream.seek(endOffset);\n\n    this.closed = true;\n  }\n\n  get dataStartOffset(): number {\n    if (!this.opened) {\n      throw new Error(\"not opened\");\n    }\n\n    return this.startOffset + 8;\n  }\n}\n","import { FileStreamReader } from \"./io/reader\";\nimport { FileStreamWriter } from \"./io/writer\";\nimport {\n  Avc1Box,\n  AvcCBox,\n  Box,\n  DinfBox,\n  DrefBox,\n  FtypBox,\n  HdlrBox,\n  MdatBox,\n  MdhdBox,\n  MdiaBox,\n  MinfBox,\n  MoovBox,\n  MvhdBox,\n  StblBox,\n  StcoBox,\n  StscBox,\n  StsdBox,\n  StssBox,\n  StszBox,\n  SttsBox,\n  TkhdBox,\n  TrakBox,\n  UrlBox,\n  VmhdBox,\n} from \"./types\";\n\nimport { parseBox } from \"./parsers\";\nimport {\n  writeBox, MdatBoxStreamWriter,\n} from \"./writers\";\n\nexport class MP4Parser {\n  private readonly stream: FileStreamReader;\n  mdat?: MdatBox;\n  moov?: MoovBox;\n\n  constructor(file: File) {\n    this.stream = new FileStreamReader(file);\n  }\n\n  async parse(): Promise<void> {\n    const ftyp = await this.parseBox();\n    if (ftyp.type !== \"ftyp\") {\n      throw new Error(\"Expected ftyp box at start of file. Not an MP4?\");\n    }\n\n    let mdat: MdatBox | undefined;\n    let moov: MoovBox | undefined;\n\n    while (!this.stream.eof) {\n      const box = await this.parseBox();\n\n      switch (box.type) {\n        case \"mdat\":\n          mdat = box;\n          break;\n        case \"moov\":\n          moov = box;\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (!mdat || !moov) {\n      throw new Error(\"Missing mdat or moov box\");\n    }\n\n    this.mdat = mdat;\n    this.moov = moov;\n  }\n\n  async getSample(sampleNumber: number): Promise<{\n    data: Uint8Array;\n    sync: boolean;\n  }> {\n    const stbl = this.moov!.trak[0].mdia.minf.stbl;\n    const stsz = stbl.stsz;\n    const stco = stbl.stco;\n\n    const sampleSize = stsz.sampleSizes[sampleNumber];\n\n    let chunkOffset = stco.chunkOffsets[0];\n    let sampleOffset = chunkOffset;\n    for (let i = 0; i < sampleNumber; i++) {\n      sampleOffset += stbl.stsz.sampleSizes[i];\n    }\n\n    this.stream.seek(sampleOffset);\n    return {\n      data: await this.stream.getNextBytes(sampleSize),\n      sync: this.isSampleSync(sampleNumber),\n    };\n  }\n\n  isSampleSync(sampleNumber: number): boolean {\n    const stbl = this.moov!.trak[0].mdia.minf.stbl;\n    return stbl.stss.sampleNumbers.includes(sampleNumber + 1);\n  }\n\n  private async parseBox(): Promise<Box> {\n    return await parseBox(this.stream);\n  }\n}\n\nexport class MP4Writer {\n  private readonly stream: FileStreamWriter;\n  private readonly mdat: MdatBoxStreamWriter;\n  private avcC?: AvcCBox;\n\n  private sampleCount = 0;\n  private syncSamples: number[] = [];\n  private sampleSizes: number[] = [];\n\n  private displaySize?: { width: number; height: number };\n\n  constructor(file: FileSystemFileHandle) {\n    this.stream = new FileStreamWriter(file);\n    this.mdat = new MdatBoxStreamWriter(this.stream);\n  }\n\n  async open(): Promise<void> {\n    const ftyp: FtypBox = {\n      type: \"ftyp\",\n      majorBrand: \"isom\",\n      minorVersion: 0,\n      compatibleBrands: [\"mp41\", \"avc1\", \"isom\"],\n    };\n\n    await writeBox(this.stream, ftyp);\n    await this.mdat.open();\n  }\n\n  async writeSample(data: Blob | BufferSource, sync: boolean) {\n    await this.mdat.write(data);\n\n    if (sync) {\n      this.syncSamples.push(this.sampleCount + 1);\n    }\n\n    this.sampleSizes.push(data instanceof Blob ? data.size : data.byteLength);\n    this.sampleCount++;\n  }\n\n  setAvcC(avcCStruct: ArrayBuffer | ArrayBufferView) {\n    // TODO: Make a nice stream view for this.\n    let view: DataView;\n    if (avcCStruct instanceof ArrayBuffer) {\n      view = new DataView(avcCStruct);\n    } else {\n      view = new DataView(\n        avcCStruct.buffer,\n        avcCStruct.byteOffset,\n        avcCStruct.byteLength\n      );\n    }\n\n    let avcC: AvcCBox = {\n      type: \"avcC\",\n      configurationVersion: view.getUint8(0),\n      profileIndication: view.getUint8(1),\n      profileCompatibility: view.getUint8(2),\n      levelIndication: view.getUint8(3),\n      lengthSizeMinusOne: view.getUint8(4) & 0x3,\n      sequenceParameterSets: [],\n      pictureParameterSets: [],\n    } as AvcCBox;\n\n    let offset: number = 5;\n\n    const spsCount = view.getUint8(offset) & 0x1f;\n    offset += 1;\n\n    const sps = [];\n    for (let i = 0; i < spsCount; i++) {\n      const spsLength = view.getUint16(offset);\n      offset += 2;\n\n      const spsData = new Uint8Array(\n        view.buffer,\n        view.byteOffset + offset,\n        spsLength\n      );\n      sps.push(spsData);\n      offset += spsLength;\n    }\n\n    const ppsCount = view.getUint8(offset);\n    offset += 1;\n\n    const pps = [];\n    for (let i = 0; i < ppsCount; i++) {\n      const ppsLength = view.getUint16(offset);\n      offset += 2;\n\n      const ppsData = new Uint8Array(\n        view.buffer,\n        view.byteOffset + offset,\n        ppsLength\n      );\n      pps.push(ppsData);\n      offset += ppsLength;\n    }\n\n    avcC.sequenceParameterSets = sps;\n    avcC.pictureParameterSets = pps;\n\n    this.avcC = avcC;\n  }\n\n  setDisplaySize(options: { width: number; height: number }) {\n    this.displaySize = {\n      width: options.width,\n      height: options.height,\n    };\n  }\n\n  async close() {\n    await this.mdat.close();\n\n    const moov: MoovBox = {\n      type: \"moov\",\n      mvhd: this.getMvhdBox(),\n      trak: [this.getTrakBox()],\n    };\n\n    await writeBox(this.stream, moov);\n    await this.stream.close();\n  }\n\n  private getTrakBox(): TrakBox {\n    return {\n      type: \"trak\",\n      tkhd: this.getTkhdBox(),\n      mdia: this.getMdiaBox(),\n    };\n  }\n\n  private getTkhdBox(): TkhdBox {\n    const startDate = new Date(\"1904-01-01T00:00:00Z\");\n    const nowDate = new Date();\n    const diffSeconds = Math.floor(\n      (nowDate.getTime() - startDate.getTime()) / 1000\n    );\n\n    return {\n      type: \"tkhd\",\n      fullBoxHeader: {\n        version: 0,\n        flags: 0x3, // Enabled and in movie\n      },\n      alternateGroup: 0,\n      creationTime: diffSeconds,\n      duration: this.sampleCount * 60,\n      width: this.displaySize!.width,\n      height: this.displaySize!.height,\n      layer: 0,\n      matrix: [0x00010000, 0, 0, 0, 0x00010000, 0, 0, 0, 0x40000000],\n      modificationTime: diffSeconds,\n      trackId: 1,\n      volume: 0,\n    };\n  }\n\n  private getMvhdBox(): MvhdBox {\n    const startDate = new Date(\"1904-01-01T00:00:00Z\");\n    const nowDate = new Date();\n    const diffSeconds = Math.floor(\n      (nowDate.getTime() - startDate.getTime()) / 1000\n    );\n\n    return {\n      type: \"mvhd\",\n      fullBoxHeader: {\n        version: 0,\n        flags: 0,\n      },\n      duration: Math.floor((this.sampleCount * 1000) / 60), // TODO: Make this configurable.\n      creationTime: diffSeconds,\n      modificationTime: diffSeconds,\n      timescale: 1000, // TODO: Make this configurable.\n      rate: 0x00010000,\n      volume: 0x0100,\n      matrix: [0x00010000, 0, 0, 0, 0x00010000, 0, 0, 0, 0x40000000],\n      nextTrackId: 2,\n    };\n  }\n\n  private getMdiaBox(): MdiaBox {\n    return {\n      type: \"mdia\",\n      hdlr: {\n        type: \"hdlr\",\n        fullBoxHeader: {\n          version: 0,\n          flags: 0,\n        },\n        handlerType: \"vide\",\n        name: \"VideoHandler\",\n      } as HdlrBox,\n      minf: this.getMinfBox(),\n      mdhd: this.getMdhdBox(),\n    } as MdiaBox;\n  }\n\n  private getMdhdBox(): MdhdBox {\n    const startDate = new Date(\"1904-01-01T00:00:00Z\");\n    const nowDate = new Date();\n    const diffSeconds = Math.floor(\n      (nowDate.getTime() - startDate.getTime()) / 1000\n    );\n\n    return {\n      type: \"mdhd\",\n      fullBoxHeader: {\n        version: 0,\n        flags: 0,\n      },\n      creationTime: diffSeconds,\n      duration: this.sampleCount,\n      language: \"\",\n      modificationTime: diffSeconds,\n      timescale: 60, // TODO: Make this configurable.\n    };\n  }\n\n  private getMinfBox(): MinfBox {\n    const stbl = this.getStblBox();\n    const dinf = this.getDinfBox();\n\n    return {\n      type: \"minf\",\n      dinf,\n      stbl,\n      vmhd: {\n        type: \"vmhd\",\n        fullBoxHeader: {\n          version: 0,\n          flags: 1,\n        },\n        graphicsMode: 0,\n        opColor: [0, 0, 0],\n      } as VmhdBox,\n    };\n  }\n\n  private getDinfBox(): DinfBox {\n    // Always reports that the data is in the same file.\n    return {\n      type: \"dinf\",\n      dref: {\n        type: \"dref\",\n        fullBoxHeader: {\n          version: 0,\n          flags: 0,\n        },\n        entries: [\n          {\n            type: \"url \",\n            fullBoxHeader: {\n              version: 0,\n              flags: 1,\n            },\n            location: \"\",\n          } as UrlBox,\n        ],\n      } as DrefBox,\n    } as DinfBox;\n  }\n\n  private getStblBox(): StblBox {\n    const stco: StcoBox = {\n      type: \"stco\",\n      fullBoxHeader: {\n        version: 0,\n        flags: 0,\n      },\n      chunkOffsets: [this.mdat.dataStartOffset],\n    };\n\n    const stsc: StscBox = {\n      type: \"stsc\",\n      fullBoxHeader: {\n        version: 0,\n        flags: 0,\n      },\n      entries: [\n        {\n          firstChunk: 1,\n          samplesPerChunk: this.sampleCount,\n          sampleDescriptionIndex: 1,\n        },\n      ],\n    };\n\n    const stsd: StsdBox = {\n      type: \"stsd\",\n      fullBoxHeader: {\n        version: 0,\n        flags: 0,\n      },\n      entries: [\n        {\n          type: \"avc1\",\n          dataReferenceIndex: 1,\n          width: this.displaySize!.width, // TODO: Get from worker.\n          height: this.displaySize!.height,\n          horizontalResolution: 0x00480000,\n          verticalResolution: 0x00480000,\n          frameCount: 1,\n          compressorName: \"mp4.ts\",\n          depth: 24,\n          avcC: this.avcC!,\n        } as Avc1Box,\n      ],\n    };\n\n    const stss: StssBox = {\n      type: \"stss\",\n      fullBoxHeader: {\n        version: 0,\n        flags: 0,\n      },\n      sampleNumbers: this.syncSamples,\n    };\n\n    const stsz: StszBox = {\n      type: \"stsz\",\n      fullBoxHeader: {\n        version: 0,\n        flags: 0,\n      },\n      sampleCount: this.sampleCount,\n      sampleSizes: this.sampleSizes,\n    };\n\n    const stts: SttsBox = {\n      type: \"stts\",\n      fullBoxHeader: {\n        version: 0,\n        flags: 0,\n      },\n      entries: [\n        {\n          sampleCount: this.sampleCount,\n          sampleDelta: 1, // TODO: What if it ain't though?\n        },\n      ],\n    };\n\n    const stbl: StblBox = {\n      type: \"stbl\",\n      stco,\n      stsc,\n      stsd,\n      stss,\n      stsz,\n      stts,\n    };\n\n    return stbl;\n  }\n}\n","import VideoWorkerShared from \"./shared\";\nimport { StreamDataView } from \"stream-data-view\";\nimport {\n  MP4Parser, MP4Writer,\n} from \"./mp4\";\nimport {\n  Avc1Box, AvcCBox,\n} from \"./mp4/types\";\n\nconst MAX_QUEUE_SIZE = 30;\nconst KEYFRAME_INTERVAL = 60;\nconst TINY_FRAME_SIZE = 100;\n\nfunction avcCBoxToDescription(avcCBox: AvcCBox): ArrayBuffer {\n  const stream = new StreamDataView(undefined, true);\n\n  stream.setNextUint8(avcCBox.configurationVersion);\n  stream.setNextUint8(avcCBox.profileIndication);\n  stream.setNextUint8(avcCBox.profileCompatibility);\n  stream.setNextUint8(avcCBox.levelIndication);\n  stream.setNextUint8(avcCBox.lengthSizeMinusOne + (63 << 2));\n\n  stream.setNextUint8(avcCBox.sequenceParameterSets.length + (7 << 5));\n  for (let i = 0; i < avcCBox.sequenceParameterSets.length; i++) {\n    stream.setNextUint16(avcCBox.sequenceParameterSets[i].length);\n    for (let j = 0; j < avcCBox.sequenceParameterSets[i].length; j++) {\n      stream.setNextUint8(avcCBox.sequenceParameterSets[i][j]);\n    }\n  }\n\n  stream.setNextUint8(avcCBox.pictureParameterSets.length);\n  for (let i = 0; i < avcCBox.pictureParameterSets.length; i++) {\n    stream.setNextUint16(avcCBox.pictureParameterSets[i].length);\n    for (let j = 0; j < avcCBox.pictureParameterSets[i].length; j++) {\n      stream.setNextUint8(avcCBox.pictureParameterSets[i][j]);\n    }\n  }\n\n  return stream.getBuffer();\n}\n\ntype InfoReadyCallback = (width: number, height: number) => void;\ntype ModifyFrameCallback = (frame: VideoFrame, index: number) => VideoFrame;\ntype ProgressInitCallback = (total: number) => void;\ntype ProgressCallback = (processed?: number, preview?: ImageBitmap) => void;\n\nexport interface ProcessorOptions {\n  infoReady: InfoReadyCallback;\n  modifyFrame: ModifyFrameCallback;\n  progressInit: ProgressInitCallback;\n  progressUpdate: ProgressCallback;\n}\n\nexport class Processor {\n  decoder?: VideoDecoder;\n  encoder?: VideoEncoder;\n\n  inMp4?: MP4Parser;\n  outMp4?: MP4Writer;\n\n  expectedFrames: number = 0;\n  framesDecoded: number = 0;\n  framesEncoded: number = 0;\n  queuedForDecode: number = 0;\n  queuedForEncode: number = 0;\n\n  infoReady: InfoReadyCallback;\n  modifyFrame: ModifyFrameCallback;\n  progressInit: ProgressInitCallback;\n  progressUpdate: ProgressCallback;\n\n  constructor(options: ProcessorOptions) {\n    this.infoReady = options.infoReady;\n    this.modifyFrame = options.modifyFrame;\n    this.progressInit = options.progressInit;\n    this.progressUpdate = options.progressUpdate;\n  }\n\n  reset() {\n    if (this.encoder) {\n      this.encoder.close();\n    }\n\n    this.encoder = new VideoEncoder({\n      output: this.handleEncodedFrame.bind(this),\n      error: this.handleEncoderError.bind(this),\n    });\n\n    if (this.decoder) {\n      this.decoder.close();\n    }\n\n    this.decoder = new VideoDecoder({\n      output: this.handleDecodedFrame.bind(this),\n      error: this.handleDecoderError.bind(this),\n    });\n  }\n\n  async processFile(file: File, outHandle: FileSystemFileHandle) {\n    this.reset();\n\n    this.inMp4 = new MP4Parser(file);\n    await this.inMp4.parse();\n\n    this.outMp4 = new MP4Writer(outHandle);\n    await this.outMp4.open();\n\n    const avc1box = this.inMp4.moov!.trak[0].mdia.minf.stbl.stsd\n      .entries[0] as Avc1Box;\n    const codec =\n      \"avc1.\" +\n      avc1box.avcC.profileIndication.toString(16).padStart(2, \"0\") +\n      avc1box.avcC.profileCompatibility.toString(16).padStart(2, \"0\") +\n      avc1box.avcC.levelIndication.toString(16).padStart(2, \"0\");\n\n    this.decoder!.configure({\n      codec: codec,\n      codedWidth: this.inMp4.moov!.trak[0].tkhd.width,\n      codedHeight: this.inMp4.moov!.trak[0].tkhd.height,\n      description: avcCBoxToDescription(\n        (this.inMp4.moov!.trak[0].mdia.minf.stbl.stsd.entries[0] as Avc1Box)\n          .avcC\n      ),\n      optimizeForLatency: false,\n    });\n\n    this.infoReady(\n      this.inMp4.moov!.trak[0].tkhd.width,\n      this.inMp4.moov!.trak[0].tkhd.height\n    );\n  }\n\n  processSamples(options: { width: number; height: number }) {\n    this.encoder!.configure({\n      codec: \"avc1.42003d\",\n      width: options.width,\n      height: options.height,\n      bitrate: 50_000_000,\n      framerate: 60,\n      latencyMode: \"quality\",\n    });\n\n    this.outMp4?.setDisplaySize({\n      width: options.width,\n      height: options.height,\n    });\n\n    this.framesDecoded = 0;\n    this.framesEncoded = 0;\n    this.queuedForDecode = 0;\n    this.queuedForEncode = 0;\n    this.expectedFrames = this.inMp4!.moov!.trak[0].mdia.mdhd.duration;\n    this.progressInit(this.expectedFrames);\n\n    this.decodeNextSamples();\n  }\n\n  async decodeNextSamples() {\n    let remainingSamples = this.expectedFrames - this.queuedForDecode;\n    if (remainingSamples <= 0) {\n      return;\n    }\n\n    const sample = await this.inMp4!.getSample(this.queuedForDecode);\n    if (sample.data.byteLength <= TINY_FRAME_SIZE) {\n      console.debug(\"Skipping tiny frame\");\n      this.queuedForDecode++;\n      this.framesDecoded++;\n      this.queuedForEncode++;\n      this.framesEncoded++;\n      this.decodeNextSamples();\n      return;\n    }\n\n    const chunk = new EncodedVideoChunk({\n      type: sample.sync ? \"key\" : \"delta\",\n      timestamp: 0,\n      duration: 60,\n      data: sample.data.buffer,\n    });\n\n    this.decoder!.decode(chunk);\n    this.queuedForDecode++;\n    remainingSamples--;\n\n    if (this.inMp4?.isSampleSync(this.queuedForDecode)) {\n      this.decoder!.flush();\n    }\n  }\n\n  handleDecodedFrame(frame: VideoFrame) {\n    if (this.framesDecoded % KEYFRAME_INTERVAL === 0) {\n      console.debug(\n        `Flushing encoder at decoded frame ${this.framesDecoded}, keyframe incoming.`\n      );\n      this.encoder!.flush();\n    }\n\n    const modifiedFrame = this.modifyFrame!(frame, this.framesDecoded);\n    frame.close();\n\n    this.encoder!.encode(modifiedFrame, { keyFrame: this.framesDecoded % KEYFRAME_INTERVAL === 0 });\n\n    this.queuedForEncode++;\n\n    if (this.framesDecoded % KEYFRAME_INTERVAL === 0) {\n      createImageBitmap(modifiedFrame).then((previewBitmap) => {\n        this.progressUpdate(undefined, previewBitmap);\n      });\n    }\n    modifiedFrame.close();\n\n    this.framesDecoded++;\n    if (this.framesDecoded === this.expectedFrames - 1) {\n      console.debug(\n        `Flushing encoder at decoded frame ${this.framesDecoded}, last frame.`\n      );\n      this.encoder!.flush();\n    }\n  }\n\n  async handleEncodedFrame(\n    chunk: EncodedVideoChunk,\n    metadata: EncodedVideoChunkMetadata\n  ) {\n    if (this.framesEncoded === 0) {\n      this.outMp4!.setAvcC(metadata.decoderConfig?.description!);\n    }\n\n    // console.debug(`Encoded frame ${this.framesEncoded}`);\n    const buffer = new ArrayBuffer(chunk.byteLength);\n    chunk.copyTo(buffer);\n\n    await this.outMp4!.writeSample(buffer, chunk.type === \"key\");\n    this.progressUpdate(this.framesEncoded);\n    this.framesEncoded++;\n\n    if (this.framesEncoded === this.expectedFrames - 1) {\n      await this.outMp4?.close();\n      postMessage({ type: VideoWorkerShared.MessageType.FILE_OUT } as VideoWorkerShared.FileOutMessage);\n    } else {\n      this.decodeNextSamples();\n    }\n  }\n\n  handleDecoderError(e: Error) {\n    console.log(this.expectedFrames, this.framesDecoded);\n    throw e;\n  }\n\n  handleEncoderError(e: Error) {\n    throw e;\n  }\n}\n","export const SD_TILE_WIDTH = 12 * 3;\nexport const SD_TILE_HEIGHT = 18 * 3;\n\nexport const HD_TILE_WIDTH = 12 * 2;\nexport const HD_TILE_HEIGHT = 18 * 2;\n\nexport const TILES_PER_PAGE = 256;\n\nexport interface FontPack {\n  sd1: Font;\n  sd2: Font;\n  hd1: Font;\n  hd2: Font;\n}\n\nexport class Font {\n  readonly name: string;\n  readonly tiles: ImageBitmap[];\n\n  constructor(name: string, tiles: ImageBitmap[]) {\n    this.name = name;\n    this.tiles = tiles;\n  }\n\n  getTile(index: number): ImageBitmap {\n    return this.tiles[index];\n  }\n\n  static async fromFile(file: File): Promise<Font> {\n    const data = await file.arrayBuffer();\n    const isHd = file.name.includes(\"hd\");\n\n    const tileWidth = isHd ? HD_TILE_WIDTH : SD_TILE_WIDTH;\n    const tileHeight = isHd ? HD_TILE_HEIGHT : SD_TILE_HEIGHT;\n\n    const tiles: ImageBitmap[] = [];\n    for (let tileIndex = 0; tileIndex < TILES_PER_PAGE; tileIndex++) {\n      const pixData = new Uint8ClampedArray(\n        data,\n        tileIndex * tileWidth * tileHeight * 4,\n        tileWidth * tileHeight * 4\n      );\n\n      const imageData = new ImageData(pixData, tileWidth, tileHeight);\n      const imageBitmap = await createImageBitmap(imageData);\n      tiles.push(imageBitmap);\n    }\n\n    return new Font(file.name, tiles);\n  }\n\n  static async fromFiles(files: File[]): Promise<FontPack> {\n    const fonts = files.map((file) => Font.fromFile(file));\n    const fontPack = await Promise.all(fonts);\n\n    return {\n      sd1: fontPack.find(\n        (font) => !font.name.includes(\"_2\") && !font.name.includes(\"hd\")\n      )!,\n      sd2: fontPack.find(\n        (font) => font.name.includes(\"_2\") && !font.name.includes(\"hd\")\n      )!,\n      hd1: fontPack.find(\n        (font) => !font.name.includes(\"_2\") && font.name.includes(\"hd\")\n      )!,\n      hd2: fontPack.find(\n        (font) => font.name.includes(\"_2\") && font.name.includes(\"hd\")\n      )!,\n    };\n  }\n}\n","import { StreamDataView } from \"stream-data-view\";\n\ninterface OsdHeader {\n  magic: string;\n  version: number;\n  config: OsdConfig;\n}\n\ninterface OsdConfig {\n  charWidth: number;\n  charHeight: number;\n  fontWidth: number;\n  fontHeight: number;\n  xOffset: number;\n  yOffset: number;\n  fontVariant: number;\n}\n\ninterface OsdFrame {\n  frameNumber: number;\n  frameSize: number;\n  frameData: Uint16Array;\n}\n\nexport class OsdReader {\n  readonly header: OsdHeader;\n  readonly frames: OsdFrame[] = [];\n\n  constructor(data: ArrayBuffer) {\n    const stream = new StreamDataView(data);\n    this.header = {\n      magic: stream.getNextString(7),\n      version: stream.getNextUint16(),\n      config: {\n        charWidth: stream.getNextUint8(),\n        charHeight: stream.getNextUint8(),\n        fontWidth: stream.getNextUint8(),\n        fontHeight: stream.getNextUint8(),\n        xOffset: stream.getNextUint16(),\n        yOffset: stream.getNextUint16(),\n        fontVariant: stream.getNextUint8(),\n      },\n    };\n\n    if (this.header.config.charWidth === 31) {\n      this.header.config.charWidth = 30;\n    }\n\n    while (stream.getOffset() < data.byteLength) {\n      try {\n        const frameNumber = stream.getNextUint32();\n        const frameSize = stream.getNextUint32();\n        const frameData = new Uint16Array(data, stream.getOffset(), frameSize);\n        stream.setOffset(stream.getOffset() + frameSize * 2);\n\n        this.frames.push({\n          frameNumber,\n          frameSize,\n          frameData,\n        });\n      } catch (e) {\n        if (e instanceof RangeError) {\n          console.warn(\"No more data in OSD file, probably truncated due to power loss\");\n          break;\n        }\n      }\n    }\n  }\n\n  static async fromFile(file: File): Promise<OsdReader> {\n    const data = await file.arrayBuffer();\n    return new OsdReader(data);\n  }\n}\n","/// <reference lib=\"webworker\" />\n\nimport VideoWorkerShared from \"./shared\";\nimport { Processor } from \"./processor\";\nimport {\n  Font, FontPack, TILES_PER_PAGE,\n} from \"./fonts\";\nimport { OsdReader } from \"./osd\";\n\nconst MAX_DISPLAY_X = 60;\nconst MAX_DISPLAY_Y = 22;\n\nexport class VideoWorker {\n  readonly processor: Processor;\n  fontPack?: FontPack;\n  osdReader?: OsdReader;\n\n  lastOsdIndex: number = 0;\n\n  wide: boolean = false;\n  hd: boolean = false;\n  outWidth?: number;\n  outHeight?: number;\n\n  osdCanvas?: OffscreenCanvas;\n  osdCtx?: OffscreenCanvasRenderingContext2D;\n  frameCanvas?: OffscreenCanvas;\n  frameCtx?: OffscreenCanvasRenderingContext2D;\n\n  constructor() {\n    this.processor = new Processor({\n      infoReady: this.infoReady.bind(this),\n      modifyFrame: this.modifyFrame.bind(this),\n      progressInit: this.progressInit.bind(this),\n      progressUpdate: this.progressUpdate.bind(this),\n    });\n\n    addEventListener(\"message\", this.onMessage.bind(this)); // eslint-disable-line no-restricted-globals\n  }\n\n  infoReady(width: number, height: number) {\n    if (width === 1280 && height === 720) {\n      this.wide = true;\n    }\n\n    if (this.osdReader!.header.config.fontWidth === 24) {\n      this.hd = true;\n    }\n\n    let outWidth: number;\n    let outHeight: number;\n    if (this.wide || this.hd) {\n      outWidth = 1280;\n      outHeight = 720;\n    } else {\n      outWidth = width;\n      outHeight = height;\n    }\n\n    this.outWidth = outWidth;\n    this.outHeight = outHeight;\n\n    this.osdCanvas = new OffscreenCanvas(\n      this.osdReader!.header.config.fontWidth *\n        this.osdReader!.header.config.charWidth,\n      this.osdReader!.header.config.fontHeight *\n        this.osdReader!.header.config.charHeight\n    );\n    this.osdCtx = this.osdCanvas.getContext(\"2d\")!;\n\n    this.frameCanvas = new OffscreenCanvas(this.outWidth!, this.outHeight!);\n    this.frameCtx = this.frameCanvas.getContext(\"2d\")!;\n\n    this.processor.processSamples({\n      width: outWidth,\n      height: outHeight,\n    });\n  }\n\n  modifyFrame(frame: VideoFrame, frameIndex: number): VideoFrame {\n    const osdCanvas = this.osdCanvas!;\n    const osdCtx = this.osdCtx!;\n    const frameCanvas = this.frameCanvas!;\n    const frameCtx = this.frameCtx!;\n\n    frameCtx.fillStyle = \"black\";\n    frameCtx.fillRect(0, 0, frameCanvas.width, frameCanvas.height);\n    osdCtx.clearRect(0, 0, osdCanvas.width, osdCanvas.height);\n\n    let frameXOffset: number;\n    if (this.hd || this.wide) {\n      frameXOffset = (this.outWidth! - frame.displayWidth) / 2;\n    } else {\n      frameXOffset = 0;\n    }\n    frameCtx.drawImage(frame, frameXOffset, 0);\n\n    if (this.lastOsdIndex < this.osdReader!.frames.length - 1) {\n      const nextOsdIndex = this.lastOsdIndex + 1;\n      const nextOsdFrame = this.osdReader!.frames[nextOsdIndex];\n\n      if (frameIndex >= nextOsdFrame.frameNumber) {\n        this.lastOsdIndex = nextOsdIndex;\n      }\n    }\n\n    const osdFrame = this.osdReader!.frames[this.lastOsdIndex];\n    for (let y = 0; y < MAX_DISPLAY_Y; y++) {\n      for (let x = 0; x < MAX_DISPLAY_X; x++) {\n        const osdFrameIndex = y + MAX_DISPLAY_Y * x;\n        const osdFrameChar = osdFrame.frameData[osdFrameIndex];\n\n        let font: Font;\n        if (this.hd) {\n          font =\n            osdFrameChar < TILES_PER_PAGE\n              ? this.fontPack!.hd1\n              : this.fontPack!.hd2;\n        } else {\n          font =\n            osdFrameChar < TILES_PER_PAGE\n              ? this.fontPack!.sd1\n              : this.fontPack!.sd2;\n        }\n\n        osdCtx.drawImage(\n          font.getTile(osdFrameChar % TILES_PER_PAGE),\n          x * this.osdReader!.header.config.fontWidth,\n          y * this.osdReader!.header.config.fontHeight\n        );\n      }\n    }\n\n    const osdScale = frameCanvas.height / osdCanvas.height;\n    const osdWidth = osdCanvas.width * osdScale;\n    const osdHeight = osdCanvas.height * osdScale;\n    const osdXOffset = (frameCanvas.width - osdWidth) / 2;\n    const osdYOffset = (frameCanvas.height - osdHeight) / 2;\n\n    frameCtx.drawImage(osdCanvas, osdXOffset, osdYOffset, osdWidth, osdHeight);\n\n    return new VideoFrame(frameCanvas as any, { timestamp: frame.timestamp! });\n  }\n\n  progressInit(expectedFrames: number) {\n    postMessage({\n      type: VideoWorkerShared.MessageType.PROGRESS_INIT,\n      expectedFrames,\n    });\n  }\n\n  progressUpdate(currentFrame?: number, preview?: ImageBitmap) {\n    postMessage(\n      {\n        type: VideoWorkerShared.MessageType.PROGRESS_UPDATE,\n        currentFrame,\n        preview,\n      },\n      [...(preview ? [preview] : [])]\n    );\n  }\n\n  async onMessage(event: MessageEvent<VideoWorkerShared.Message>) {\n    const message = event.data;\n    switch (message.type) {\n      case VideoWorkerShared.MessageType.FILE_IN: {\n        console.debug(\"Hello from the worker!\");\n\n        this.osdReader = await OsdReader.fromFile(message.osdFile);\n        console.debug(\"Got OSD reader\");\n\n        this.fontPack = await Font.fromFiles(message.fontFiles);\n        console.debug(\"Got font pack\");\n\n        console.debug(\"Starting processor...\");\n        await this.processor.processFile(message.videoFile, message.outHandle);\n        break;\n      }\n\n      default: {\n        throw new Error(\"Unknown message type received\");\n      }\n    }\n  }\n}\n\nnew VideoWorker();\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [735], function() { return __webpack_require__(451); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"2905a6ff\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t451: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkwtfos_configurator\"] = self[\"webpackChunkwtfos_configurator\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(735).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["MessageType","VideoWorkerShared","FileStreamReader","file","buffer","ArrayBuffer","bufferOffset","_offset","this","length","getNextBytes","bytes","byteBuffer","getNextUint8","byte","push","Uint8Array","decoder","TextDecoder","string","decode","getDataView","view","getUint8","getUint16","getUint32","getBigUint64","result","i","offset","bufferEndOffset","size","fillEndOffset","newBufferOffset","Math","floor","BUFFER_SIZE","newBufferEndOffset","ceil","slice","arrayBuffer","fillBuffer","DataView","byteLength","FileStreamWriter","stream","_size","value","array","writeNextBytes","setUint16","setUint32","undefined","TextEncoder","encodeInto","getStream","write","Blob","seek","close","createWritable","truncate","parseBox","getNextUint32","getNextString","type","boxParsers","UrlBoxParser","UrnBoxParser","avc1","Avc1BoxParser","avcC","AvcCBoxParser","dinf","DinfBoxParser","dref","DrefBoxParser","ftyp","FtypBoxParser","hdlr","HdrlBoxParser","mdat","MdatBoxParser","mdhd","MdhdBoxParser","mdia","MdiaBoxParser","minf","MinfBoxParser","moov","MoovBoxParser","mvhd","MvhdBoxParser","stbl","StblBoxParser","stco","StcoBoxParser","stsc","StscBoxParser","stsd","StsdBoxParser","stss","StssBoxParser","stsz","StszBoxParser","stts","SttsBoxParser","tkhd","TkhdBoxParser","trak","TrakBoxParser","udta","UdtaBoxParser","vmhd","VmhdBoxParser","parser","console","warn","UnknownBoxParser","parse","BoxParser","header","getHeader","startOffset","endOffset","boxes","getNextChildBox","box","diff","SimpleBoxParser","seekToEnd","FullBoxParser","version","flags","getFullBoxHeader","fullBoxHeader","majorBrand","minorVersion","compatibleBrands","getChildBoxes","childBoxes","Error","creationTime","modificationTime","timescale","duration","rate","getNextUint16","volume","matrix","nextTrackId","trackId","layer","alternateGroup","width","height","language","entryCount","entries","nextChild","dataReferenceIndex","horizontalResolution","verticalResolution","frameCount","compressorName","depth","configurationVersion","profileIndication","profileCompatibility","levelIndication","lengthSizeMinusOne","spsCount","sps","spsLength","spsData","ppsCount","pps","ppsLength","ppsData","sequenceParameterSets","pictureParameterSets","sampleNumbers","chunkOffsets","firstChunk","samplesPerChunk","sampleDescriptionIndex","sampleSizes","sampleCount","sampleDelta","handlerType","name","graphicsMode","opColor","location","writeBox","writer","UrlBoxWriter","UrnBoxWriter","Avc1BoxWriter","AvcCBoxWriter","DinfBoxWriter","DrefBoxWriter","FtypBoxWriter","HdlrBoxWriter","MdhdBoxWriter","MdiaBoxWriter","MinfBoxWriter","MoovBoxWriter","MvhdBoxWriter","StblBoxWriter","StcoBoxWriter","StscBoxWriter","StsdBoxWriter","StssBoxWriter","StszBoxWriter","SttsBoxWriter","TkhdBoxWriter","TrakBoxWriter","VmhdBoxWriter","BoxWriter","skip","writeNextString","writeContents","writeNextUint32","FullBoxWriter","writeNextUint8","compatibleBrand","sequenceParameterSet","writeNextUint16","entry","color","chunkOffset","sampleSize","sampleNumber","MdatBoxStreamWriter","opened","closed","MP4Parser","eof","sampleOffset","isSampleSync","data","sync","includes","MP4Writer","syncSamples","displaySize","open","avcCStruct","byteOffset","options","getMvhdBox","getTrakBox","getTkhdBox","getMdiaBox","startDate","Date","nowDate","diffSeconds","getTime","getMinfBox","getMdhdBox","getStblBox","getDinfBox","dataStartOffset","avcCBoxToDescription","avcCBox","StreamDataView","setNextUint8","setNextUint16","j","getBuffer","Processor","encoder","inMp4","outMp4","expectedFrames","framesDecoded","framesEncoded","queuedForDecode","queuedForEncode","infoReady","modifyFrame","progressInit","progressUpdate","VideoEncoder","output","handleEncodedFrame","bind","error","handleEncoderError","VideoDecoder","handleDecodedFrame","handleDecoderError","outHandle","reset","avc1box","codec","toString","padStart","configure","codedWidth","codedHeight","description","optimizeForLatency","bitrate","framerate","latencyMode","setDisplaySize","decodeNextSamples","getSample","sample","debug","chunk","EncodedVideoChunk","timestamp","flush","frame","modifiedFrame","encode","keyFrame","createImageBitmap","then","previewBitmap","metadata","setAvcC","decoderConfig","copyTo","writeSample","postMessage","e","log","TILES_PER_PAGE","Font","tiles","index","isHd","tileWidth","tileHeight","tileIndex","pixData","Uint8ClampedArray","imageData","ImageData","imageBitmap","files","fonts","map","fromFile","Promise","all","fontPack","sd1","find","font","sd2","hd1","hd2","OsdReader","frames","magic","config","charWidth","charHeight","fontWidth","fontHeight","xOffset","yOffset","fontVariant","getOffset","frameNumber","frameSize","frameData","Uint16Array","setOffset","RangeError","VideoWorker","processor","osdReader","lastOsdIndex","wide","hd","outWidth","outHeight","osdCanvas","osdCtx","frameCanvas","frameCtx","addEventListener","onMessage","OffscreenCanvas","getContext","processSamples","frameIndex","frameXOffset","fillStyle","fillRect","clearRect","displayWidth","drawImage","nextOsdIndex","osdFrame","y","x","osdFrameIndex","osdFrameChar","getTile","osdScale","osdWidth","osdHeight","osdXOffset","osdYOffset","VideoFrame","currentFrame","preview","event","message","osdFile","fromFiles","fontFiles","processFile","videoFile","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","key","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","f","chunkId","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","p","installedChunks","importScripts","chunkLoadingGlobal","self","parentChunkLoadingFunction","moreModules","runtime","pop","next"],"sourceRoot":""}